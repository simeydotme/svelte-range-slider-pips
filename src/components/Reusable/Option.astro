---
import { Icon } from 'astro-icon'
type propType = "String" | "Number" | "Boolean" | "Object" | "Array" | "Function" | "Symbol" | "Node" | "Element" | "Element[]"

interface Props {
  propName: string;
  propType: propType | propType[];
  defaultValue: string;
  link?: string;
  new?: boolean;
}

const { propName, propType, defaultValue, link, new: isNew } = Astro.props;
const propTypeString = Array.isArray(propType) ? propType.join(" | ") : propType;
const isRender = propName && propType && defaultValue;

// fix up relative links due to pathing issues in vite/astro
// let usableLink = link?.replace(/^\.?\//, "../");
// if ( !link?.match(/^\.?\//) ) {
  let usableLink = `/svelte-range-slider-pips/en/${link}`
// }
---

{isRender &&

  <section class="sliderProp" id={propName}>
    <header class="sliderProp__header">
      <h2 title="The prop name"><a href={`#${propName}`}>{propName}</a></h2>
      <code title="The type that the prop expects">{propTypeString}</code>
      <code title="The default value for this prop (if not provided)">{defaultValue}</code>
      {isNew && <span class="sliderProp__new" title="New in v4.0.0">New</span>}
    </header>

    <div class="sliderProp__content">
      <slot />
    </div>

    {link &&
      <a class="sliderProp__link" href={usableLink}>
        See Example<Icon name="fluent:ios-chevron-right-20-filled" /> 
      </a>
    }

  </section>  

}

<style>

  .sliderProp {
    display: flex;
    flex-direction: column;
    padding: .5rem;
    border: 1px solid transparent;
    transition: background 0.2s ease-in-out;
  }

  .sliderProp + .sliderProp {
    margin-block-end: 2rem;
  }

  .sliderProp:nth-of-type(even) {
    background: hsla(var(--color-gray-90), .5);
  }

  .sliderProp:nth-of-type(even) :global(code) {
    background-color: white;
  }

  .sliderProp:target,
  .sliderProp:focus-within,
  .sliderProp:hover {
    border-color: hsla(var(--color-purple), .5);
    border-radius: 5px;
    padding-inline: .5rem;
  }

  .sliderProp:target,
  .sliderProp:focus-within {
    box-shadow: var(--shadow-elevation-medium);
  }

  .sliderProp:target {
    animation: pulsate-fwd 1s cubic-bezier(0.770, 0.000, 0.175, 1.000) both;
  }

  .sliderProp:hover {
    border-color: hsla(var(--color-gray-50), .5);
  }

  .sliderProp__header {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding-block: .25rem .75rem;
    padding-inline: .25rem 0;
    border-bottom: 1px solid hsla(var(--color-gray-90));
  }

  .sliderProp__new {
    position: absolute;
    top: 0;
    left: 0;
    background-color: hsla(var(--color-purple), .5);
    color: white;
    padding: .1rem .3rem;
    border-radius: .3rem;
    margin-right: 1rem;
    font-size: 0.675em;
    translate: -100% -100%;
    rotate: -12deg;
    z-index: 1;
  }

  .sliderProp__header h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
  }

  .sliderProp__header h2 a {
    color: inherit;
    text-decoration: none;
  }

  .sliderProp:target .sliderProp__header {
    border-bottom-color: hsla(var(--color-gray-70));
  }

  .sliderProp__header > :nth-child(1) {
    flex: 1 1 auto;
  }
  .sliderProp__header > :nth-child(1n + 2) {
    flex: 0 0 fit-content;
    margin-left: 1rem;
  }

  .sliderProp__content {
    padding: .5rem;
    transition: all 0.2s ease-in-out;
  }

  .sliderProp__link {
    display: inline-block;
    margin-left: auto;
    padding: .25rem .5rem;
    border-radius: .25rem;
    text-decoration: none;
  }

/**
 * ----------------------------------------
 * animation pulsate-fwd
 * ----------------------------------------
 */
@-webkit-keyframes pulsate-fwd {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.1);
            transform: scale(1.1);
  }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
}
@keyframes pulsate-fwd {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
  50% {
    -webkit-transform: scale(1.1);
            transform: scale(1.1);
  }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
  }
}


</style>