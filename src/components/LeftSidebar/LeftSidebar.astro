---
import { getLanguageFromURL } from "../../languages";
import { SIDEBAR } from "../../consts";

type Props = {
  currentPage: string;
};

const { currentPage } = Astro.props;
const currentPageMatch = currentPage.endsWith("/") ? currentPage.slice(1, -1) : currentPage.slice(1);
const langCode = getLanguageFromURL(currentPage);
const sidebar = SIDEBAR[langCode];
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups">
    {
      Object.entries(sidebar).map(([header, links]) => (
        <li>
          <div class="nav-group">
            <h2>{header}</h2>
            <ul>
              {links.map((link) => {
                const url = Astro.site?.pathname + link.link;
                if (!link.children || link.children.length === 0) {
                  const ariaCurrent = url.endsWith(currentPageMatch) ? "page" : false;
                  return (
                    <li class="nav-link">
                      <a href={url} aria-current={ariaCurrent}>
                        {link.text}
                      </a>
                    </li>
                  );
                } else {
                  const ariaChildCurrent = currentPageMatch === url.split("#")[0] || url.endsWith(currentPageMatch) ? "page" : false;
                  return (
                    <li class="nav-link">
                      <a href={url} aria-current={ariaChildCurrent}>
                        {link.text}
                      </a>
                      <ul>
                        {link.children.map((grandchild) => {
                          const gurl = Astro.site?.pathname + grandchild.link;
                          const ariaGrandchildCurrent = currentPageMatch === gurl.split("#")[0] || gurl.endsWith(currentPageMatch) ? "page" : false;
                          const titleText = grandchild.new ? "New in v4.0.0" : "";
                          return (
                            <li class="nav-link nav-sublink" title={titleText}>
                              <a href={gurl} aria-current={ariaGrandchildCurrent} data-new={grandchild.new}>
                                {grandchild.text}
                              </a>
                            </li>
                          );
                        })}
                      </ul>
                    </li>
                  );
                }
              })}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  const scrollToCurrentLink = () => {
    var target = document.querySelector('[aria-current="page"]');
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".nav-groups").scrollTop = target.offsetTop;
    }
  }
  const focusSubLink = () => {
    const currentPath = window.location.pathname;
    const urlPath = (currentPath.endsWith("/") ? currentPath.slice(0, -1) : currentPath);
    const urlHash = window.location.hash;
    document.querySelectorAll(`.nav-sublink a`)?.forEach((el) => {
      const linkUrl = new URL(el.href);
      const linkPath = linkUrl.pathname;
      const linkHash = linkUrl.hash;
      el.removeAttribute("aria-current");
      if (linkHash) {
        el.setAttribute("aria-current", urlPath === linkPath && linkHash === urlHash ? "page" : false);
      } else {
        el.setAttribute("aria-current", urlPath === linkPath ? "page" : false);
      }
    });
    // const selectedSubLink = document.querySelector(`.nav-sublink a[href="${url + window.location.hash}"]`) ?? document.querySelector(`.nav-sublink a[href*="${url}"]`);
    // console.log('x',url,window.location.hash,selectedSubLink);
    // selectedSubLink?.setAttribute("aria-current", "page");
  };
  window.addEventListener("hashchange", focusSubLink);
  window.addEventListener("DOMContentLoaded", scrollToCurrentLink);
  focusSubLink();
  scrollToCurrentLink();
</script>

<style>
  nav {
    width: 100%;
    margin-right: 1rem;
  }

  .nav-groups {
    height: 100%;
    padding: 0 1rem;
    overflow-x: visible;
    overflow-y: auto;
    scrollbar-width: thin;
    max-height: 100vh;
    max-height: 100dvh;
    scroll-padding-block: 2rem;
  }

  .nav-groups > li + li {
    margin-top: 2rem;
  }

  .nav-groups > :last-child {
    padding-bottom: calc(2rem + var(--theme-navbar-height));
  }

  .nav-group-title {
    font-size: 1rem;
    font-weight: bold;
    padding: 0.1rem 1rem;
    text-transform: uppercase;
    margin-bottom: 0.5rem;
  }

  .nav-link a {
    font-size: 1rem;
    margin: 1px;
    padding: 0.2rem 1rem 0.35rem;
    text-decoration: none;
    display: block;
    border-radius: 99em;
  }

  .nav-sublink a {
    margin-block: 0;
    margin-inline-start: 1rem;
    padding-block: 0 0.1rem;
    padding-inline-start: 1rem;
    border-radius: 0;
    border-left: 2px solid var(--theme-bg-hover);
    transition: border 0.2s ease;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-sublink a:hover,
  .nav-sublink a:focus {
    background: none;
    border-left: 2px solid hsla(var(--color-gray-70), 1);
  }

  .nav-link a[aria-current="page"],
  .nav-link:not(.nav-sublink):has(a[aria-current="page"]) > a {
    color: var(--theme-text-accent);
    background-color: var(--theme-bg-accent);
    font-weight: 600;
  }

  .nav-sublink a[aria-current="page"] {
    border-left: 2px solid var(--theme-accent);
    background-color: transparent;
  }

  .nav-sublink a[data-new] {
    color: hsla(var(--color-purple), 1);
    &::after {
      content: "â˜…";
      font-size: 0.75em;
    }
  }

  @media (min-width: 50em) {
    .nav-groups {
      padding-block: 0;
      padding-inline: 0 1rem;
    }
  }
</style>

<style is:global>
  :root.theme-dark a[aria-current="page"] {
    --theme-bg-accent: hsla(var(--color-base-simey), 70%, 0.25);
  }
  :root.theme-dark .nav-link a[aria-current="page"],
  :root.theme-dark .nav-link:not(.nav-sublink):has(a[aria-current="page"]) > a {
    color: hsla(var(--color-base-white), 100%, 1);
  }
</style>
